#version 460 core
layout(local_size_x = 1) in;

struct Particle {
	vec4 pos;
	vec4 color;
};

struct History {
	vec4 pos;
};


layout(std430, binding = 0) writeonly buffer ParticlesBuffer {
	Particle[] particles;
};

layout(std430, binding = 1) writeonly buffer HistoryBuffer {
	History[] history;
};

uniform uint trailSize;
uniform vec3 spawnPoint;
uniform float maxDisplacement;

float map(float value, float min1, float max1, float min2, float max2) {
  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);
}

vec3 randomPos(vec2 st) {
    return vec3(
        mod(sin(dot(st, vec2(23.456, 98.765))) * 98765.4321, 1.0),
        mod(sin(dot(st, vec2(34.567, 12.345))) * 54321.8765, 1.0),
        mod(sin(dot(st, vec2(56.789, 21.987))) * 32109.8765, 1.0)
    );
}

void main() {
	uint index = gl_GlobalInvocationID.x;
	uint historyIndex = index * trailSize;

	vec2 randInput = vec2(spawnPoint.x + maxDisplacement, spawnPoint.y + maxDisplacement) + maxDisplacement * index;
	
	vec3 randomPosOutput = randomPos(randInput);
	randomPosOutput.x = map(randomPosOutput.x, 0.0, 1.0, -maxDisplacement, maxDisplacement);
	randomPosOutput.y = map(randomPosOutput.y, 0.0, 1.0, -maxDisplacement, maxDisplacement);
	randomPosOutput.z = map(randomPosOutput.z, 0.0, 1.0, -maxDisplacement, maxDisplacement);

	vec4 initPosition = vec4(randomPosOutput, 1.0);

	particles[index].pos = initPosition;
	
	for(int i = 0; i < trailSize ; i++){
		history[historyIndex + i].pos = initPosition;
	}
}
